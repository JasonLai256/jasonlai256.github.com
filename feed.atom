<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://www.pywave.com/feed.atom</id>
  <updated>2014-11-13T00:00:00Z</updated>
  <link href="http://www.pywave.com/" />
  <link href="http://www.pywave.com/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">Happy Hacking</title>
    <id>http://www.pywave.com/2014/11/13/happy-hacking</id>
    <updated>2014-11-13T00:00:00Z</updated>
    <link href="http://www.pywave.com/2014/11/13/happy-hacking" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;今年上半年的时间是我人生最难忘的时光之一，可以说无论身体和心理都是持续处于高压的状态，总有处理不完的问题出现，
技术跟不上的压力，服务器 IO 的压力，业务增长的压力，公司财务的压力，感情生活的压力。也曾出现几度泪崩的情况。
现在回头再看，确实是，如人饮水，冷暖自知。&lt;/p&gt;
&lt;p&gt;一方面来说是非常的幸运，在这些问题解决的过程里，自己都能得到身边牛人的指导前进。获益匪浅，帮助我得到了一些
技术层面上质的长进。&lt;/p&gt;
&lt;p&gt;另一方面，过程中除了肚子延续了变大的趋势外，整体的身体素质也有了很大的滑坡。手指关节疼痛，肩痛和腰痛成为了
伴随身边的梦魇，在后期基本每到晚上时候肩和腰都会隐隐作痛，非常折磨人。&lt;/p&gt;
&lt;p&gt;大概是 8 月份的时候，因为意识到这么下去必然会是恶性循环，我开始着手计划一些改变。&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;我一直想去跑步，公司旁边的华师就有运动场可以供人运动，但我觉得很多东西不太方便就一直没有去。复盘回想，其实懒
应该是最大原因，呵呵。&lt;/p&gt;
&lt;p&gt;于是我认为健身房里面的跑步机是个不错的选择，但是没有去健身房经验的我，对这个事情也不太确定，故也拖了一阵时间。
直到 8 月中旬时候，我联系了附近的一家力美健的销售人员谈了下。年卡接近 4 千多的价格吓到了我，因为我这个时候的
金钱压力也是非常的大。最后是 8 月底试玩了一次，感觉不错，加上年卡能降到 3 千多点，就咬牙刷了信用卡。&lt;/p&gt;
&lt;p&gt;事实证明，运动确实是生命之源，现在我的肩痛和腰痛已经是不药而愈了。心情不再那么烦躁，技术上的东西也愈发得心
应手。&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;手指关节的疼痛来源于 macbook air 那“瘦小”的键盘，很早就察觉到这个问题，只是觉得笔记本的优势就是便携性，加多个
外置键盘会破坏整体的感受。于是在优化了键位（将 caps lock 和左 control 互换）后也就随之自然了。&lt;/p&gt;
&lt;p&gt;不良后果逐渐显现，后来每当打字加快速度，左右手的中指或无名指的关节处会产生持续的疼痛，整体编程的感觉受到极大
的影响。去年的时候尝试过买指套来戴，一开始觉得有点效果，但是毕竟治标不治本，加上指套很紧久了也会带来不舒适的
感觉，很快也就没有继续使用。&lt;/p&gt;
&lt;p&gt;在 9 月的时候，经济有所改善，思前想后，我“狠心”买下了 HHKB Pro2 这款静电容键盘。&lt;/p&gt;
&lt;p&gt;不知不觉，使用 &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Happy_Hacking_Keyboard&quot;&gt;HHKB&lt;/a&gt; 已经快两个月啦，出色的手感让我对这个其貌不扬的键盘越发喜爱，适配 mac 的键位分布也是非常
让人的顺心。我的手指疼痛问题就这么好了。另外，精简的键位布局让键盘轻便了起来，每天带着上下班也没什么压力。&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
      &lt;img style=&quot;height: 284px;  width: 439px;&quot; src=&quot;/static/img/material/device/F5717EA2-HHKB.png&quot;&gt;
      &lt;p class=&quot;caption&quot;&gt;
           黑色版 HHKB Pro2
      &lt;/p&gt;
&lt;/div&gt;&lt;p&gt;使用了外置键盘后，很自然的，我又想扩展屏幕了。公司有空闲的显示器可用，在京东试了几款笔记本托架，最后确认实施
方案（下图），整体效果也是非常的喜人，很舒适。&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
      &lt;img style=&quot;height: 290px;  width: 433px;&quot; src=&quot;/static/img/material/environ/E411C63C-working-desk.png&quot;&gt;
      &lt;p class=&quot;caption&quot;&gt;
           现在的工作桌面
      &lt;/p&gt;
&lt;/div&gt;&lt;p&gt;工作环境改善的案例，让我也准备把家里的环境搭好。故在刚刚双 11 里，采购了相关的配件，让家里的编程环境也进行个
大改善。呵呵，想想还是有点小激动呐！&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;舒适的环境让我更加舒心的进行编程。&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
&lt;dl class=&quot;docutils&quot;&gt;
&lt;dt&gt;. role:: strike&lt;/dt&gt;
&lt;dd&gt;&lt;table class=&quot;first last docutils field-list&quot; frame=&quot;void&quot; rules=&quot;none&quot;&gt;
&lt;col class=&quot;field-name&quot; /&gt;
&lt;col class=&quot;field-body&quot; /&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr class=&quot;field&quot;&gt;&lt;th class=&quot;field-name&quot;&gt;class:&lt;/th&gt;&lt;td class=&quot;field-body&quot;&gt;strike&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">IPython 中的并行计算处理简介</title>
    <id>http://www.pywave.com/2014/09/16/parallel-programming-in-ipython</id>
    <updated>2014-09-16T00:00:00Z</updated>
    <link href="http://www.pywave.com/2014/09/16/parallel-programming-in-ipython" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;首先， &lt;a class=&quot;reference external&quot; href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt; 确实是个非常好用的 Python &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;/a&gt; Shell，习惯一开机就会打开一个 terminal session
并常开着 ipython ，以便随时进行 python 相关的实时交互。不过一直是保持够用就好的心理，有很多 magic
function 都不太熟悉呢。还有就是 ipython &lt;a class=&quot;reference external&quot; href=&quot;http://ipython.org/notebook.html&quot;&gt;notebook&lt;/a&gt; 了，玩过几次，投奔 evernote 后就没有怎么
碰过了，不过时不时看到别人用 notebook 做的分享，还是相当不错的啦。&lt;/p&gt;
&lt;p&gt;然后就是准备要讲东西，基于 ipython 支持的并行计算处理。虽然我的了解还很肤浅，不太可靠，但这个
parallel 相关项目给我的感觉就是 amazing！可以看出利用 ipython 在 interactive python env 上
面的积累，使得整体的并行计算处理都是可以交互式进行 ，极度的灵活，很牛很牛呢。不过实际上这个东西
是适合于做科学计算（也许数据分享也适合吧），暂时没有想到现有的相关项目可以用上。无论如何，
下面简单看下 ipython parallel computing 的相关实现咯。&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;IPython 里的 I 表示的意思是 Interactive (交互)，对 REPL 是如此，对并行计算的支持也是如此。当
初步了解相关使用后，就会发现这确实很 Cool！下面先看下 IPthon 并行计算相关架构图，&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
      &lt;img style=&quot;width: 300px;&quot;
           src=&quot;/static/img/material/ipython/architecture.png&quot;&gt;
      &lt;p class=&quot;caption&quot;&gt;
           ipython parallel computing architecture
      &lt;/p&gt;
&lt;/div&gt;&lt;p&gt;OK，首先要说明，因为我对于 ipython 的理解现在还是停留在表面 (往后可能会深入代码研究)，下面的
叙述仅仅是个人的一些总结，绝不保证正确哦。 :-)&lt;/p&gt;
&lt;p&gt;图中最下面的 engine 就是整体架构中真正进行计算处理的实体，每一个 engine 都是独立的一个进程，也
包含着一个独立的 python env。好吧，可以推断，这货跟 multiprocessing 的多进程模型类似，规避了
GIL 的限制，每个进程都是由 python 的解析器接管处理，不过 ipython 自身的代码基包含许多对于
python 运行环境的 hack，具体是如何就需要深入源码探索才知道咯。每部机器可以开启 N 个 engine
（一般推荐是 cpu cores 对应个数），也可以多部机器组成一个集群，并行计算中实际进行的运算就在
这些 engine 中。&lt;/p&gt;
&lt;p&gt;而图中间的 hub 和 schedulers 可以看做是中间人的角色，也就是 controller，提供途径让 client 能
与 engines 交互，也管理着各 clients 和 engines 的运行和连接情况。特别的，因为一个集群（或多核
机器）里可能有多个 engines 存在，controller 这边提供了两种方式让 client 去选择 engine 来处理
事务，包括 Direct 方式，能让 client 直接选定任何一个确定的 engine 来进行处理，以及 LoadBalanced
方式，通过 controller 来对各 engines 进行负载均衡判断并选择出进行处理的 engine 来。&lt;/p&gt;
&lt;p&gt;当然，图上方的 client 就是用户程序实际调用的东西咯，用于连接 ipython 的计算集群，发送具体指令去
执行相关计算逻辑。&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;一些简单的实例代码就不贴上来了，文档和相关教程里已经有很多了（ &lt;a class=&quot;reference external&quot; href=&quot;http://ipython.org/ipython-doc/dev/parallel/parallel_intro.html&quot;&gt;这里&lt;/a&gt; ）。&lt;/p&gt;
&lt;p&gt;就我而言，暂时觉得 ipython parallel computing 实现里的 engine 最有趣，因为每个 engine 都是
一个完整的 python env，通过 client 去远程处理每个 engine 就是超爽！另外就是 controller 这一
层，刚开始了解还以为就是一个 broker 的角色，稍稍深入点就发现其实 hub + schedulers 其实才是整体
的核心，保证了并行计算交互的顺利进行。&lt;/p&gt;
&lt;p&gt;另外一点也是我比较喜欢的，整个 ipython parallel computing 架构的组件是通过 &lt;a class=&quot;reference external&quot; href=&quot;http://zeromq.org/&quot;&gt;zmq&lt;/a&gt; ( pyzmq ) 来
进行通信交互。因为涉及到了集群间通信，首先是分布式集群管理的固有复杂度，然后还要处理好 client，
hub，scheduler 和 engine 间的交互以及各类访问模式。从结果推论，使用 zmq 还是较出色的完成了
任务。下面是相关图示，&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
      &lt;img src=&quot;/static/img/material/ipython/zmq_all_connections.png&quot;&gt;
      &lt;p class=&quot;caption&quot;&gt;
           内部 zmq 连接图
      &lt;/p&gt;
&lt;/div&gt;&lt;p&gt;其实挺想找个机会将 ipython 的强悍特性排上用场，不过想了一会也做罢了。现在时兴大数据分析是有原因的，
基于数据来源越来越丰富的事实，我们需要一种快捷，通用以及可扩展的技术去处理好海量数据分析。难题包括
数据存储以及如何分析，故现在基于 Hadoop 发展出来时兴技术是一堆又一堆呢！无论是 MapReduce 还是
实时分析都是由实际问题出发而来。而 ipython 的并行计算只是解决了如何快速，方便和可扩展的进行 ...
额，运算。应该确实是很适合科学计算相关的处理，但是对于一些实际的，简单的，枯燥的数据分析却是支持
不大咯。当然，这只是我这井底蛙的肤浅想法啦。&lt;/p&gt;
&lt;p&gt;话不多写，大概就是这样子啦。以后有什么 ipython 的学习感想再谈谈相关吧。&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">处理简单的资源调度</title>
    <id>http://www.pywave.com/2013/03/23/process-simple-resource-scheduling</id>
    <updated>2013-03-23T00:00:00Z</updated>
    <link href="http://www.pywave.com/2013/03/23/process-simple-resource-scheduling" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;要在中国“扭曲“的网络环境中发展 &lt;a class=&quot;reference external&quot; href=&quot;https://www.cdnzz.com/&quot;&gt;CDN 服务&lt;/a&gt; ，需要付出许多额外的努力，其中，敏感信息是不得不面对的
事情。在去年，我们还一度认为只要网站备案了，或者接入时经过初审通过，流量信息应该就是足够可靠的了。
结果在年末时出了些不大不小的烦人事情，被迫临时无限期停止公众的注册活动。也没办法，需要将危机看作
转机，我们决定继续将时间放在基础服务的开发上，并开始专注企业客户的服务。&lt;/p&gt;
&lt;p&gt;时间一下子来到了3月份，许多新功能陆续上线，团队和开发方面也有了中长期规划。于是，决定在近期再次向
公众开放我们的 CDN 服务。有过'掉坑'的经验，我们明白到除了好的服务和功能外，还是需要一番额外的机制。
其中，也就是本文有所探讨的，我们需要快速整出一套简单可用的自动化信息审核系统，以降低开放的风险。这
是一个神奇的国度才有的特殊需求，无奈但必须。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;整体情况&lt;/h2&gt;
&lt;p&gt;坚持团队一贯的尽早完成第一版可用程序和 &lt;a class=&quot;reference external&quot; href=&quot;/2012/07/23/hello-modularity/#kiss&quot;&gt;KISS&lt;/a&gt; 原则，我们希望以简单的想法和最快的速度去实现该系统。
最后确定的实现方案也确实很简单，主要的实现包括一个中央调度进程，以及进行具体处理的 Workers 进程。&lt;/p&gt;
&lt;p&gt;调度中心统一接收各节点推送过来的 URLs，对接收的 URLs 进行过滤和排重等处理，实时维护一簇待检测内容
的 URLs，并提供 fetch 和 push 操作作为 URLs 的调度分发接口。负责具体检测任务的 Workers 进程向中心
取 URLs 进行检测，检测完成后，再将已检测的 URLs 信息推送回中心进行处理，中心会将已检测的 URLs 归档
为已处理。还有一点很重要，因为 URLs 的内容可能会有变动，已处理的 URLs 存在相应的 timeout 时间，保证
已检测的 URLs 在超过 timeout 时间后会再次进行内容检测。&lt;/p&gt;
&lt;p&gt;之所以要区分中央调度进程和 Workers 进程，是考虑到当内容检测的规模变得庞大时，可以通过水平扩展机器的
数量，简单地启动更多的 Workers 进程来解决问题。因为 URLs 的管理分发逻辑都在调度中心实现，调度中心
可以保证待处理 URLs 能安全公平地分发到各 Worker 进程去，在执行完内容检测后，再归并汇总各 Workers 推
送回来的内容检测结果，形成一个可扩展的 map-reduce 体系结构。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;谈谈资源调度&lt;/h2&gt;
&lt;p&gt;上面大概描述了系统的整体情况，下面会接着讲述一些关于调度中心实现的细节，也就是本文的主题，资源调度
的相关处理。为了更好的理解，本文出现的代码只包含基本的处理逻辑，忽略了相关出错处理，具体 RPC 实现以及
特殊情况处理的逻辑。&lt;/p&gt;
&lt;p&gt;调度中心需要对 URLs 数据进行管理，考虑了几个方面，最后决定使用 &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/leveldb/&quot;&gt;LevelDB&lt;/a&gt; 来作数据持久化。LevelDB 具
有优秀的性能表现，基于简单的 key-value 操作，其高效的顺序读写功能也能让程序获益，而且是 Disk 型存储
让我们不需担心资源问题。不足的是，同一时间里，一个 LevelDB 数据库只能被一个进程操控，不过还好多线程
不受限制。因为调度中心和 Workers 进程的关系就是纯粹的 client-server 模式，调度中心对数据库进行统一
管理，同时对 Workers 提供分发和汇总的接口，利用多线程就能将调度中心实现的很好。&lt;/p&gt;
&lt;p&gt;基于简单实现和维护的思想，调度中心将只维护两个数据库，包括 done_db 和 todo_db。其中 done_db 存放已
完成内容检测的 URLs，而 todo_db 存放待进行检测的 URLs，这些都由调度中心来进行管理。下面的代码是数据
库和一些相关变量的初始化逻辑。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;settings&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Initial some useful arguments&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL_TIMEOUT&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLOCK_LEN&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 初始化相关 db 以及对应的 lock&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done_db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leveldb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LevelDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done_db_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leveldb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LevelDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 使用 Lock 保证线程对 LevelDB 的读写具有同步性&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done_db_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db_lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各节点会不停地将 URLs 推送过来，其中必然存在大量的冗余。利用 done_db 和 todo_db 已存储的数据，可以
将还没有被检测过或已 expire 了的 URLs 过滤出来，然后写入 todo_db 中，让 Workers 进程可以获取到。&lt;/p&gt;
&lt;p&gt;简单的将 url 作为 LevelDB 的键（key），通过检测 url 是否存在于两个数据库中，就可以判断该 url 是否
已被检测过或正等待被检测。需要解决的特殊情况是，如何简单地判断出一个 url 已被检测过但已经 expire ，
这类 URLs 需要再次进行内容检测。当然，有很多方法可以解决这个问题。在刚开始实现时，我把这问题想复杂
了，好一会才意识到，我需要的是一个简单的实现方法。结合 LevelDB 的 key-value 特性，综合考虑性能和
实现复杂度，我决定从数据的存储结构下手:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
done_db 存储结构:  (md5_key, timestamp_value) 键值对
todo_db 存储结构:  (md5_key, url_value) 键值对
&lt;/pre&gt;
&lt;p&gt;两个数据库都使用 url 的 MD5 值来做 Key，但根据具体的使用方式来存放不同的值。todo_db 的值为 url 可以
方便 fetch 接口的调度操作。而 done_db 的值为时间戳，就是该 url 的入库时间，这样，通过检测当前的时间
戳和 done_db 中的 timestamp_value 就可以判断 url 是否已 expire 。基于简单的数据存储结构，代码的实现
当然也是很简单。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;url_existed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;判断 url 在 todo_db 和 done_db 中是否存在。&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existed_in_todo_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;existed_in_done_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;existed_in_todo_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;监测 url_md5 是否存在于 todo_db 中。&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    若存在，返回对应的值，否则，返回 None。&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;existed_in_done_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;监测 url_md5 是否存在于 done_db 中。&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    若存在，且该值的存放时间还没超过 timeout 时间，那么返回对应的值，否则，返回 None。&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了上面抽象出来的 url_existed 方法，可以很容易判断一个 url 是否归类为待处理。接下来，需要实现接收
各节点推送 URLs 的处理逻辑了。对 URLs 进行遍历，判断是否 url_existed，若是，就写入到 todo_db 中，
否则，忽略之。就这么简单。&lt;/p&gt;
&lt;p&gt;因为 LevelDB 支持批量写操作，先将过滤出来的 URLs 收集起来，然后集中写入到 todo_db 中去。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done_db_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leveldb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;md5_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_existed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md5_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md5_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决了待处理 URLs 的入库问题，调度中心还需要实现 fetch 和 push 接口，用于调度分发待处理 URLs 给
各 Workers 进程，让 Workers 进程可以通过接口来获取 URLs 进行检测，然后将完成了检测的 URLs 推送回来。&lt;/p&gt;
&lt;p&gt;LevelDB 高效简单的顺序读写操作是非常的顺手。配合 done_db 和 todo_db，我们可以很容易实现这两个接口。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;从 todo_db 中返回 block_len 个待处理 urls.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leveldb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RangeIter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 当 keys 有被填充时，进行 done_db 的相关操作&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;todo_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rv&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push_done_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;根据获取的 urls 给 done_db 进行批量写入。&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leveldb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;md5_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate_md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md5_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done_db_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done_db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好的，到现在，调度中心的任务就实现的差不多了，也就那么点东西，没什么复杂。好吧，实际上，实现整个
系统的过程中，还是费了不少的脑力，也出现了一些没预料到的状况。现在呈现的解决方案，跟最初设想的解决
方案相比，已经是完全变了个样。很有趣。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;一套简单可行的解决方案非常珍贵。&lt;/p&gt;
&lt;p&gt;发现了 LevelDB 的巨大潜力，以后的项目实现中难不免都会想到这货。&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">记配置管理的相关设计和想法</title>
    <id>http://www.pywave.com/2013/02/03/some-ideas-and-design-of-the-configuration-management</id>
    <updated>2013-02-03T00:00:00Z</updated>
    <link href="http://www.pywave.com/2013/02/03/some-ideas-and-design-of-the-configuration-management" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;最近工作的主旋律是围绕着监控和配置系统的构建进行相关设计和实现，包括原始数据的收集和传输，汇总数据
的处理、存储和展示，以及相关配置的设置和分发，等等系列相关任务。对于这个相对较大型的项目，需要
多个程序相互协作，且对整体运行的可靠性和稳健性都有很高的要求。面对此类高要求项目，感到颇具挑战性，
故这段时间是开足马力地投入到开发中去。&lt;/p&gt;
&lt;p&gt;在项目实现的过程中，除了接触到许多新鲜的工具和技术外，感悟最深的是，如何宏观地看待程序设计，让整体
项目保持足够的简单，以便组合各程序一起去完成大规模的任务。在此想记录工作中的一些思考和想法。不会
展示具体实现的详细，主要是程序设计时思维的变化过程。&lt;/p&gt;
&lt;p&gt;配置管理是项目的一个重点和难点，因为我们设想其为公司内部 Python 项目的配置管理中心 &lt;a class=&quot;footnote-reference&quot; href=&quot;#id8&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; 。配置管理
中心，单从字面意思就知道其用处，但要实现一个高可靠和高可用的配置管理中心绝对不是一件简单的事情。&lt;/p&gt;
&lt;p&gt;基于尽早完成第一版可用程序和 &lt;a class=&quot;reference external&quot; href=&quot;/2012/07/23/hello-modularity/#kiss&quot;&gt;KISS&lt;/a&gt; 的原则，我们决定使用 &lt;a class=&quot;reference external&quot; href=&quot;http://thrift.apache.org/&quot;&gt;Thrift&lt;/a&gt; 来进行 RPC 通信,先完成一个基础的
类 C/S 模型的配置管理中心程序。配置管理中心的整体功能由两个独立程序（配置的设置和分发功能）来实现，
如此设计的原因有几个，这里就不表述了。下面的记述，就是我在处理配置设置和分发程序相关逻辑时的一些
思考。&lt;/p&gt;
&lt;p&gt;对于配置数据，两个程序各自的处理逻辑相当一目了然。一个程序利用配置数据（只读），自身作为服务器，
对外提供配置分发的功能，下面我会称之为 &lt;cite&gt;分发程序&lt;/cite&gt; 。另一个程序生成和控制配置数据（读写），处理
创建、更新和删除等典型的 &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; 操作，下面我会称之为 &lt;cite&gt;控制程序&lt;/cite&gt; 。&lt;/p&gt;
&lt;p&gt;嗯，事情就是这样，问题也算是清晰，但是，如何让两独立程序对配置信息进行更好的通信交互？看似很简单
的问题，实际中还是需要花一番时间解决。在具体的处理里，从开始的配置文件驱动，到后来的数据库驱动，
我的想法有很大的变化。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;配置文件驱动&lt;/h2&gt;
&lt;p&gt;项目启动后，便开始考虑程序的具体实现。当时没想太多其他的东西，非常直接，配置文件嘛，当然就是用文件
来记录。接着想到的念头是，配置的逻辑可能会很复杂，应该使用一种高可读性的配置文法去记录配置。好吧，
这种角色非 &lt;a class=&quot;reference external&quot; href=&quot;http://yaml.org/&quot;&gt;YAML&lt;/a&gt; 莫属啦。然后，就到了费脑筋的事情啦。&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;控制程序&lt;/cite&gt; 和 &lt;cite&gt;分发程序&lt;/cite&gt; 相互独立， &lt;cite&gt;控制程序&lt;/cite&gt; 在变更了配置后，应该让 &lt;cite&gt;分发程序&lt;/cite&gt; 知道，让其去获取
最新的配置。诚然，两个程序间需要交互通信。但是，考虑到整体项目还包含多个程序，我不想为这两个程序
额外引入一套独立的 &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Inter-process_communication&quot;&gt;IPC&lt;/a&gt; 机制，希望能让程序间的交互尽量保持简单。&lt;/p&gt;
&lt;p&gt;应该怎么做呢？其实再想一下就能搞清楚状况。关键就在两个程序对于配置数据的处理逻辑上，一个会对配置
进行读写操作，但是另一个则只对配置进行读操作。对的，其实解决方法的思路很简单，只要 &lt;cite&gt;控制程序&lt;/cite&gt; 能
在修改配置数据后对外标识配置已改变， &lt;cite&gt;分发程序&lt;/cite&gt; 可以按照一定时间周期轮询监测配置是否有变更，从而就
能够及时更新配置，使配置数据的分发保持可用状态。&lt;/p&gt;
&lt;p&gt;事实上，我们可以简单粗暴地实现配置的分发可用，即忽略配置数据是否被修改， &lt;cite&gt;分发程序&lt;/cite&gt; 在每一次轮询
监测时都初始化一次全部配置，这样确实可以保证 &lt;cite&gt;分发程序&lt;/cite&gt; 维护着最新的配置数据。&lt;/p&gt;
&lt;p&gt;显然，这类弊端明显的实现是不会得到同意的，我们应该更优雅的实现上面所描述的思路。更好的想法是，确定
一个存放配置文件的目录，根据文件的最近修改时间（即 mtime ）来判断配置是否有变更，这样唯有当一个配置
文件真正被修改后， &lt;cite&gt;分发程序&lt;/cite&gt; 才会 reload 该配置。&lt;/p&gt;
&lt;p&gt;为了更好的管理配置，不同的配置文件可以存放在不同的路径中，以目录层级进行逻辑区分。并且，在底层目录
存放一个 config.yml 中心配置文件，其将作为 &lt;cite&gt;控制程序&lt;/cite&gt; 和 &lt;cite&gt;分发程序&lt;/cite&gt; 的通信桥梁，汇总所有配置文件的
存放路径以及其它的更多信息。&lt;/p&gt;
&lt;p&gt;通过监测这中心配置文件，我们可以很容易的获取有效配置文件的相关信息。其设置的格式很简单，如下所示:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
PATHS:
    .:
        - python.yml
        - dclist.yml
    host:
        cn:
            - info.yml
        usa:
            - info.yml
    database:
        - mongodb.yml
        - mysql.yml
        - redis.yml
&lt;/pre&gt;
&lt;p&gt;上面展示的是 config.yml 中配置路径相关的信息， &lt;cite&gt;分发程序&lt;/cite&gt; 可以很方便的由此获取所有有效配置文件的
路径信息。下面的 transform 函数利用递归，可以将 config.yml 中的路径信息转换为 python 中的 list 来
存储。简单的处理，但也很有趣。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;config.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conf_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;PATHS&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用 transform 函数将 config.yml 配置转换后，可以得到:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
['host/cn/info.yml',
 'host/usa/info.yml',
 './python.yml',
 './dclist.yml',
 'database/mongodb.yml',
 'database/mysql.yml',
 'database/redis.yml']
&lt;/pre&gt;
&lt;p&gt;获得有效配置文件的路径后，就可以初始化各配置文件的相关上下文信息，包括我们需要的文件最近修改时间。
搭配其余的一些配置元信息， &lt;cite&gt;分发程序&lt;/cite&gt; 就可以按照确定的时间周期轮询监测配置文件啦。&lt;/p&gt;
&lt;p&gt;OK，整体的思路大概就是这样，不复杂，容易实现，不过事情永远都是变化大于计划。很快我又否定了这个配置
文件驱动的解决方案，转向使用数据库来实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h2&gt;数据库驱动&lt;/h2&gt;
&lt;p&gt;从配置文件转到数据库，原因很简单也很自然， &lt;cite&gt;控制程序&lt;/cite&gt; 对配置的处理主要是 CRUD 操作，使用数据库会
更加方便。更重要的，现在的初版配置管理中心， &lt;cite&gt;分发程序&lt;/cite&gt; 只需实现为单机部署程序就行了，但是不排除
未来会将其改进为分布式程序。到时候，如果后端是使用数据库（ MySql ）管理配置数据，可以很容易的过渡。
反之， ... ^!*&amp;amp;^%%!&amp;amp;%^&amp;amp;$*% ... ，我都懒得去想了。&lt;/p&gt;
&lt;p&gt;之所以没有一开始就使用数据库方案，主要是因为预想到某些配置会很复杂，比较难用 schema 进行描述。如
Host 数据收集的配置，总的可用配置项会很多，而单个配置项也会有多个不同选择，每部主机会根据实际情况
定制特定的配置。使用 YAML 来进行设置会很简单，能适应不同的状况，但如果想用数据库的 table 来结构化
表示，这个 ... 就太恐怖了。&lt;/p&gt;
&lt;p&gt;还好，后来自己也转过了弯来，谁说数据库 table 不能存储 YAML 文本的？只要 &lt;cite&gt;控制程序&lt;/cite&gt; 保证 YAML 文本
的正确性，直接使用 text field 就可以了。也就是说，使用 text field 来存储 YAML 配置数据，一行数据
即一个独立配置（如一个 Host 的配置）。如此一来，对于那些具有复杂逻辑的配置，就可以使用数据库进行
存储啦。当然，对于那些逻辑简单的配置，只需要使用数据库固定的 schema 表示就足够了。&lt;/p&gt;
&lt;p&gt;确定可以使用数据库来存储配置数据后，老问题又浮出水面了，如何让 &lt;cite&gt;分发程序&lt;/cite&gt; 知道配置数据已经变更了。
在上面的配置文件驱动里，我们使用文件的最近修改时间来让 &lt;cite&gt;分发程序&lt;/cite&gt; 判断配置的状态。显然，我们可以
采用同样的策略，通过设置一个 is_modified 域来标识该配置是否有改动（0 为 False， 1 为 True）。如此，
&lt;cite&gt;分发程序&lt;/cite&gt; 每次监测只需检索出那些 is_modified 域为 1 的配置项，根据这些配置项更新缓存，然后再将
数据库中这些数据项的 is_modified 域设置为 0，即可完成监测操作。&lt;/p&gt;
&lt;p&gt;但是，仅靠 is_modified 域还是不够。为什么？因为在数据库中，当一些配置被删除掉了，这些配置不会留下
任何痕迹， &lt;cite&gt;分发程序&lt;/cite&gt; 也就无法知道有什么数据项被删除了 &lt;a class=&quot;footnote-reference&quot; href=&quot;#id9&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，考虑了几个解决方案。其中包括，让 &lt;cite&gt;分发程序&lt;/cite&gt; 每隔一天就完整载入一次所有配置，从而
就避免了配置数据的遗漏，但是这个解决方法使得配置的有效性会有较长的延迟，无法接受，抛弃。&lt;/p&gt;
&lt;p&gt;最后采用的解决方法是，使用懒惰删除。类似于 is_modified 域，我们再定义一个 is_deleted 域，用来标识
该配置是否在 &lt;cite&gt;控制程序&lt;/cite&gt; 中被删除了。也就是说，在 &lt;cite&gt;控制程序&lt;/cite&gt; 中删除某些配置时，实质上不会真的删除该
配置，只是将该配置的 is_deleted 域设置为 1。这样一来， &lt;cite&gt;分发程序&lt;/cite&gt; 除了检索 is_modified 域的操作外
（如上面所述），还需要检索那些 is_deleted 域为 1 的配置项，更新缓存的配置数据，最后将数据库中的这些
数据项真正删除掉。这时候，才算最终完成了监测操作。&lt;/p&gt;
&lt;p&gt;上面的处理逻辑听起来貌似有点复杂，但实际上整体的操作还是很简单，主要是我的语言描述不够透彻简洁。
我想，还是代码更来得简单易懂。下面的代码展示了 &lt;cite&gt;分发程序&lt;/cite&gt; 初始化和更新操作的逻辑处理。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Configs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configs&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT * FROM `conf_info` WHERE `is_deleted` != 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configs&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 处理 deleted 的数据项&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;select_deleted_sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT * FROM `conf_info` &amp;quot;&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&amp;quot;WHERE `is_deleted` = 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_deleted_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;del_sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;DELETE FROM `conf_info` WHERE `id` = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# 更新 Configs，然后将数据项从数据库中真正删除掉&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;del_sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 处理 modified 的数据项&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;select_modified_sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT * FROM `conf_info` &amp;quot;&lt;/span&gt;
                           &lt;span class=&quot;s&quot;&gt;&amp;quot;WHERE `is_modified` = 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_modified_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;udp_sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UPDATE `conf_info` SET `is_modified` = &amp;#39;0&amp;#39; &amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;s&quot;&gt;&amp;quot;WHERE `id` = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# 更新 Configs，然后将数据项的 is_modified 域修正为 0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Configs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udp_sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码就是 &lt;cite&gt;分发程序&lt;/cite&gt; 中，监测线程实际实现的大概逻辑。看到这里，你大概有点忍耐不住要嚷嚷了，
明明在使用数据库，当有请求时，直接向数据库查询配置数据，处理后返回就是啦。明明可以简单的实现，为
什么要动态监测配置数据，硬生生在程序中维护多一份配置数据。&lt;/p&gt;
&lt;p&gt;简单的想，“请求，查询，处理，返回”，这样的处理逻辑当然是成立的。但有得就有失，其代价是相对较高的
计算资源以及缓慢的数据库查询。公司的基础业务是 CDN 服务，可以预想未来的服务器数量会不断增长，前瞻
性的考虑配置分发服务器的性能问题是有必要的。当然，这个话题还可以延伸很长。我只想说，很多东西是复杂
还是简单，不是一句话就能说完全的。上面所说的方案能解决问题，而且整个概念并不复杂，实际的代码实现也
确实很简单，也可以复用。所以，实际就这样做了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id6&quot;&gt;
&lt;h2&gt;还有不足&lt;/h2&gt;
&lt;p&gt;细心点就能发现，上面数据库驱动中所说的解决方法还是存在着不足， &lt;cite&gt;分发程序&lt;/cite&gt; 对于配置更新的监测会有
漏洞，使得程序缓存的配置信息与数据库的配置信息不完全一致。&lt;/p&gt;
&lt;p&gt;在 &lt;cite&gt;分发程序&lt;/cite&gt; 使用了 info.title 来做 key 缓存所有的配置信息，假设该配置项的 title 被 &lt;cite&gt;控制程序&lt;/cite&gt; 修改
了。当然，其 is_modified 域会被标识为 1， &lt;cite&gt;分发程序&lt;/cite&gt; 在监测配置项时会对其进行更新。但是因为 title 被
修改了， &lt;cite&gt;分发程序&lt;/cite&gt; 将会用新的 title 做 key 缓存该配置信息，而旧的 title 所缓存的配置信息却还保留在
内存中。&lt;/p&gt;
&lt;p&gt;解决方法是，每隔一天（或更长的时间）进行一次全面的更新，校正可能的“脏配置数据”，保证 &lt;cite&gt;分发程序&lt;/cite&gt; 中
配置信息的准确性和同步性。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id7&quot;&gt;
&lt;h2&gt;不是总结的总结&lt;/h2&gt;
&lt;p&gt;在工程上应该尽可能使用简单实用的方法。&lt;/p&gt;
&lt;p&gt;简单清晰的实现方案，更容易理解和构建，使得不可能避免的 Debug 更为轻松（可能发生在一年后或者三天后），
也让程序的重构和改进变得更为轻松。总的来说，就是让我们的生活更舒适。 :-)&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id8&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;最开始想使用 &lt;a class=&quot;reference external&quot; href=&quot;http://zookeeper.apache.org/&quot;&gt;ZooKeeper&lt;/a&gt; ，不过考察后认为还是自行研发更符合实况。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id9&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id5&quot;&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;但是，使用配置文件驱动可以知道，文件跟数据库还是不一样的。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">2012</title>
    <id>http://www.pywave.com/2013/01/04/conclude-2012</id>
    <updated>2013-01-04T00:00:00Z</updated>
    <link href="http://www.pywave.com/2013/01/04/conclude-2012" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;简直难以置信，这就一年过去啦？！光阴白驹过隙，在时间大神精确无情的操控下，2012年悄无声息且永不回头
的离我们而去。世界没有毁灭，生活依然继续。在这年，我终于离开了校园，踏入社会开始独立生活。在格安
工作的大半年时间里，感受到了很多不一样的东西，或疑惑，或开心，或激动。最庆幸的，虽然身边的许多东西
都在不停变化，依然能保持着自己的态度，尽力做好每一件事。&lt;/p&gt;
&lt;p&gt;生活时而忙碌，时而悠闲，基本上是有条不紊地过着，除了脚踏实地逐步向前迈进，偶尔也会抬头仰望下星空。
在2013年，我希望能够继续保持良好的状态，学习并探究各种有趣的事情。工作上，期待可以做出一番让自己
和他人满意的图景。生活上，希望自己能成为一个更好的男人，做好并承担各项重要的决定和事情。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;coding-practicing&quot;&gt;
&lt;h2&gt;coding, practicing&lt;/h2&gt;
&lt;p&gt;毕业后，最终选择留在格安工作，原因包括下面几个。&lt;/p&gt;
&lt;p&gt;首先，公司给出的薪水还算符合自己的心理预期。当然，我没预料到，年终几个月的经济会如此的艰难，公司
因为资金原因只能发着基本工资（最初几个月的正式工资还被自己很开心地到处乱花... o(╯□╰)o），导致
近来都靠透支信用卡过着日子。不过我们都认为公司是有前景的，曙光也即将到来，故这些日子还是要咬咬牙
挺过去哈。&lt;/p&gt;
&lt;p&gt;其次，公司能给空间我去不断开拓和实践。我想，这应该是最为重要的原因，我享受那种环境，根据实际问题
提出见解，讨论并改进，持续迭代实现。过程中，可以收获到不同的设计思路以及实现方法，当然，还能获得
成就感与乐趣。纸上得来终觉浅，绝知此事要躬行。知识可以从书中以及很多途径获得，而经验只有花时间从
实践中获得。我渴望自己能够不断进步。&lt;/p&gt;
&lt;p&gt;最后，自己不是一个爱折腾的人，既然感觉 OK，那就不多想了。&lt;/p&gt;
&lt;p&gt;在正式工作的半年里，遇到不少有挑战性的任务，在解决处理的过程中，获得了可贵的经验和成长。回首那些
时间，能够切实的感悟到，过去在基础数据结构与算法中下的苦功夫，对编程风格良好品味的培养，都是值得的！
这些过往积累的知识在解决实际问题的过程中获得了“释放”，并逐渐内化到我的思维中，让我变得更为实效。&lt;/p&gt;
&lt;p&gt;整体来看，自己的工作轨迹还算是保持着积极以及热情，能够持续去学习、编码和实践。遗憾的是，自己在很多
的事情上还是有显著的不足，不够成熟，不够担当，不够细致，很多事情都还有待改进。还有很长的一段路要
走呢。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;终于毕业了&lt;/h2&gt;
&lt;p&gt;大学的日子一度让我感得无法忍受，自顾自地在计算机科学技术的世界畅游。过程中，发现了思考的乐趣，找寻到
了自己人生的目标，但也使得自己的学业几度告急。从08年入学，时间终于来到了2012年6月份，我毕业了。回想
毕业的那天，当时自己的心情没有什么特别，很平静地听从各种安排，很平静地领取了学位证书，很平静地打包好
行装，和女友一起坐和谐号回到了广州住处，离开了那徘徊四年之久的东莞。也正式离开了校园。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;实习的时间&lt;/h2&gt;
&lt;p&gt;在实习刚开始的那段时间，自己还真的是没怎么找到感觉，连公司的业务（ &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Content_delivery_network&quot;&gt;CDN&lt;/a&gt; ，内容分发网络）都没搞清楚
就开始进行相关的编程，些许不知所以然，唯有循规蹈矩地按照标哥的讲述以及自己的理解去实现任务。还好，
这样的情况没有持续多久，不熟悉就花时间去学习，不确定就投入精力去实践。在实习的几个月里，也成功完成
了数个任务，在这过程中，我的信心逐渐累积，相关的编程经验也在火速上涨。&lt;/p&gt;
&lt;p&gt;学校的琐碎事情依然不断，导致那段时间我时常需要往返于广州和东莞。坐在客车上，望着窗外景色在眼前飞速
流逝，总能让我感觉到时光也在不断流逝。生命总是从一个阶段瞬间跳跃到另一个阶段，我知道自己也即将要
跨入人生的另一阶段了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id4&quot;&gt;
&lt;h2&gt;寻找实习&lt;/h2&gt;
&lt;p&gt;从刚接触 Python 编程开始，就为其简洁优雅所吸引，彼时便希望未来找一份 Python 相关开发的工作。为此，
从去年开始，除了保持对基础 CS 相关知识和编程素养的学习，我开始有意识地去接触学习一些实际生产环境中
会使用的工具以及软件开发方法论，包括 Unix/Linux 编程环境（适应那些常用命令以及伟大的 emacs），版本
控制系统（svn 和 git），极限编程（对结对编程和 TDD 较感兴趣），敏捷开发（让我明白正式开发也不是什么
沉重的事情），以及开始去了解和接触开源的世界。&lt;/p&gt;
&lt;p&gt;那时候，也清楚 Python 在国内更多的是 Web 方面的开发，故还特意花了不少时间去学习 Django 方面的开发。
现在想来，对于 Django 的学习之旅也很有价值，让我了解了许多网络以及 web 开发相关的第一手知识。&lt;/p&gt;
&lt;p&gt;我在开学前就来到了学校，花了十几天处理好学校的一些事情，然后就开始找实习啦。在搜索引擎、社区群组和
招聘网站上都找了找，结果总共发现了屈指可数的几个广东 Python 相关的实习。这倒是在我的意料之中。给这
几个家都发了简历，结果不知是我资历过浅，还是简历做的不好，没有几家公司有响应。其中一家在广州的公司
来电约了个时间面试，刚好那时候需要到广州补拍毕业的证件照（自己导致的折腾事），于是约好了面试的时间
，打算那天拍了照后顺便去天河五山面试。&lt;/p&gt;
&lt;p&gt;好吧，事情就发展到这里。我通过了面试，进入了这家名为格安科技，提供 &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Content_delivery_network&quot;&gt;CDN&lt;/a&gt; 基础服务的初创公司，人不
多，地方也不大，但当时给我的感觉还不错，于是乐观的认为在这里应该能学到东西。再然后，准确的说，应该
是两天之后，我就来上班啦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id5&quot;&gt;
&lt;h2&gt;最后的寒假&lt;/h2&gt;
&lt;p&gt;随着2011年的过去，大四伊始那“精彩绚丽”的学期也终于结束了，生活总是出人意外，不过最后依然是回归
平静。于是，学生时代的最后一个寒假也准时到来了。没什么特别，还是如往年那样回家度过，唯一不同的是
，这次有女朋友陪着我一起去车站，买车票。 :-)&lt;/p&gt;
&lt;p&gt;寒假在家，除了照例帮家里的忙，其余的大部分时间依然是放在了技术学习和编码上。心中明白，短暂的假期
很快就会结束，返校后将会有很多的事情需要去做。&lt;/p&gt;
&lt;p&gt;在假期寂静的寒夜里，我对过往所做所学所感受的东西进行了多番思索，思考了很多。最后也没得出什么具体的
结论。但我确定自己的选择没错，我喜爱程序设计这项高水平的智力游戏，投入其中让我感受到无与伦比的乐趣。
我的选择，我能做好。&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">Out of Their Minds - 近观大师的生平</title>
    <id>http://www.pywave.com/2012/12/27/out-of-their-minds</id>
    <updated>2012-12-27T00:00:00Z</updated>
    <link href="http://www.pywave.com/2012/12/27/out-of-their-minds" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;在21世纪的今天，我们愉悦地使用着各种计算设备，自由地畅览互联网(好吧，这点中国还是比较特殊)，信息
的获取、产生和处理在我们身边无时无刻地进行着。是数不清的计算机基础理论，在支撑这些美好事物的持续
运行。而在那些计算机基础理论的后面，是数代计算机科学家研究探索的成果。这个时代的程序员无疑是幸福
的，不必再去开拓许多基础的东西，可以站在更高的层次去解决实际问题。但同时，我很多时候都会很好奇，
在那个使用穿孔卡纸来进行机器编程的年代，那些为计算机的魔力所吸引的人，是如何去探索发现其中的乐趣。&lt;/p&gt;
&lt;p&gt;近段时间看了《 &lt;a class=&quot;reference external&quot; href=&quot;http://book.douban.com/subject/10432364/&quot;&gt;奇思妙想&lt;/a&gt; 》(Out of their Minds) 这本书。原书编写于1998年，立足于现场访谈的第一手
记录，书中向我们展示了15位当代伟大计算机科学家的许多事情（非常汗颜自己只知道其中不到一半的前辈），
包括描述他们过往的生活历程和工作成果。本书具有不少有趣和引人思考的内容，让我知道了大师们成长以及
科研时期的许多事情。阅读这些东西具体有什么作用？其实我也不知道，但在阅读此书的过程中确实带给了我
不少的思考，这就非常难得。抱着增广见闻的心态去看此书，感觉应该是非常的不错。&lt;/p&gt;
&lt;p&gt;对了，还要感谢译者用心翻译，虽然语言间还是略显生硬，但都不太影响阅读的感觉。本书让我们一窥这些伟大
计算机科学家的风采，在阅读的过程中，特别对书中的一些访谈内容进行了些许摘录，以做记录。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;john-backus&quot;&gt;
&lt;h2&gt;John Backus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;大多数科学家之所以成为科学家，是因为他们畏惧生活。在科学中有所成就无疑非常诱人，因为在此过程中
无需与人产生冲突，无需应付艰难的人际关系，可以完全按自己的方式生活。在这个近乎纯洁的象牙塔里，
你可以全力施展自己的才华，而没有任何痛苦。与生活中的困难相比，解决科学问题的困难简直就是微不足
道。&lt;/p&gt;
&lt;p&gt;而自我反省则不是一种科学活动，它不可重复，也没有好的理论用以指导你如何去做或者追求什么。通过对
自己的反省，你可以真正理解宇宙的奥秘，这是非常奇妙的一件事情。而这是通过任何物理定律都做不到的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;john-mccarthy&quot;&gt;
&lt;h2&gt;John McCarthy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;如果希望计算机具有一般的智能，那么其外在结构就必须基于一般的常识和推理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;所有的科学以及专业理论中都引入了常识。当你想要改进理论时，你总要回到常识推理，因为是常识推理
主导着你的试验。&lt;/p&gt;
&lt;p&gt;所以，如果有人想设计出更好的象棋程序，就需要对自己的成果进行试验，让它分析各种棋局。有关进行何种
试验的所有推理都立足于常识框架之内。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;利用逻辑表达世界中的事实的进展一直都很缓慢。亚里士多德没有发明形式体系。莱布尼茨没有发明命题演算
，尽管这种形式体系比他和牛顿同时发明的微积分更加简单。乔治·布尔发明了命题演算，却没有发明谓词
演算。戈特洛布·弗雷格发明了谓词演算，但从未尝试过将非单调推理形式化。我想我们人类明白，要明确地
表达我们思维过程中的各种事实，表面来看似乎简单，实际上是很困难的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;alan-c-kay&quot;&gt;
&lt;h2&gt;Alan C.Kay&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;所有对事物的认识都始于我们不愿盲目地接受这个世界。&lt;/p&gt;
&lt;p&gt;在自然科学中，是大自然给出一个世界，而我们去探索其中的法则。对于计算机来说，却是我们自己来创建
法则，创造一个世界。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我对人工智能真的不感兴趣，部分原因在于它太难了。我的生物学背景告诉我，为人工智能建立一套可行性
标准绝不是件容易的事。每次我坐下来思考这个问题，总发现那些令其他人满意的成果无法令我满意。在我
看来，他们所做的东西并不能称为是智能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;人们想要的东西往往并不是他们真正需要的，因为两者是受不同的原因驱动的。技术应该让愿望和需求保持
一致，并同时满足两者。这非常重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;edsger-w-dijkstra&quot;&gt;
&lt;h2&gt;Edsger W. Dijkstra&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我曾问我母亲（一位数学家）数学是不是一门很难的学科。她告诉我，你要做的就是学会所有的公式并且
应用自如。另外要记住，如果你需要5行以上来证明某件事，那么你的方法肯定错了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;人们总是痴迷于自己不幸的根源 —— 这也是许多婚姻能稳固的根本原因。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;当时我正在试图改进数学论证：让论证更简单、更清晰。这需要把从编程中得到的经验运用到更广阔的数学
领域中。&lt;/p&gt;
&lt;p&gt;众所周知，要想把某件事做大，就必须对其进行分解 —— 类似于某些模块，我们必须能够独立开各个部分。
编程的人都知道，这绝不只是劳动分工的问题，因为如果接口选择错误或者不恰当，工作量就会成10倍地
攀升 —— 这可不是加法那么简单。&lt;/p&gt;
&lt;p&gt;举个例子。假设有四位住在不同城市的作曲家，决定共同谱写一首弦乐四重奏。一种分工方式是你写第一
乐章、我写慢板乐章、他写终曲。另一种方式是你写第一小提琴，我写大提琴，他写中提琴。如果是后一
种划分，作曲家们就需要进行大量的沟通。这个例子很好地说明了实用与不实用的劳动分工。程序员必须
考虑到这一点。一个优秀的数学理论一定具有实用性劳动分工的所有特征。缺乏经验的理论家的典型表现
就是陶醉在自己提出的复杂论证中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我永远秉承自己的看法和判断，毫不妥协。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;michael-o-rabin&quot;&gt;
&lt;h2&gt;Michael O. Rabin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我们应当放弃寻找绝对正确的结果和答案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我认为，我们对于复杂任务还缺乏充分的理解。比如说，我们对人的记忆如何工作就缺乏充分的理解。如果
我和你谈起贝多芬，你马上就能知道我说的是一位作曲家。人们能够构建一种记忆组织方法，或者计算机
程序，在一个有限的领域内对姓名分类。&lt;/p&gt;
&lt;p&gt;但是，我们的记忆比这要复杂得多。你走在路上遇到一个糟蹋的人，于是突然想起上学时那位脏兮兮的同桌。&lt;/p&gt;
&lt;p&gt;就算是这种例子仍然过于简单。我们通过结构来记忆事物。你看到一个满怀心事的人，却联想到以前听说过
的一个完全不相干的笑话。我们无时无刻不在进行这种思维的跳跃。&lt;/p&gt;
&lt;p&gt;我们看到一个人的背影，看到他走路的方式，然后说这个人就是杰瑞。我们几乎从不会出错。至少我自己几乎
从不会出错。做到这一点不需要进行太多思考。而这是如何做到的，我们完全无法理解。&lt;/p&gt;
&lt;p&gt;我认为，这并不说明人类的思维能力和计算机的能力之间的差别。只不过是我们不知道如何编写计算机程序来
做到这一点罢了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;donald-e-knuth&quot;&gt;
&lt;h2&gt;Donald E. Knuth&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;计算机编程是一种艺术形式，就如同人们谱写诗歌和音乐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;数学是一种模式的科学。音乐也是模式。计算机科学在进行抽象、建立模式等方面同样有很多作为。我认为，
计算机科学与其他领域最大的区别就在于它不断的跃变 —— 从微观角度上升到宏观角度。&lt;/p&gt;
&lt;p&gt;有许多职业的产生是有明确的需要，人们要找到解决重要问题的方法，比如医学方面的职业。而像计算机科学
这样的职业之所以存在，是我们从小形成的思维结构所决定的。&lt;/p&gt;
&lt;p&gt;如果你碰巧属于某 2%的人，那么你就会自然而然地被计算机所吸引而产生共鸣。正是思维方式将我们与其他
人区分开来。最终，我意识到自己是一位计算机科学家。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我想，我分析算法的方式与业界绝大部分研究者不同。我的研究的独特之处在于能够指出某事比另一件事要
好 10%到 15%。这是品味和性情的问题。我善于观察细节，这是从小接受的训练决定的；而有些人善于通观
全局。&lt;/p&gt;
&lt;p&gt;有些科学家就像探险家，喜欢走出去，在新领土上竖起旗帜；另一些则喜欢在已有的土地上灌溉和施肥，规范
结构，立定法规。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我们常说需求是发明之母，这句话并不确切。一个人还得拥有该领域的背景知识。我并不是随走随看，研究
自己看到的每一个问题。我解决的那些问题，都是因为我正好有独特的背景知识，也许会帮助我解决它。这是
我的命运，我的责任。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;总的来说，不管你想研究的是什么，只要你能想象自己要对计算机来解释它，你就能发现这一主题中有哪些
你还不太了解的地方。这能帮助你提出正确的问题，也是对你所知的终极考验。&lt;/p&gt;
&lt;p&gt;比如说，人们提出音乐理论是为了对什么好听、什么不好听作出客观而非主观的解答。我们知道莫扎特的音乐
很好听，因为曲目和谐等。但当你要为计算机写出一个程序，让它创造真正优秀的音乐时，你就会知道已有的
那些规则是多么苍白。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;robert-e-tarjan&quot;&gt;
&lt;h2&gt;Robert E. Tarjan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我喜欢想象结构、线图和数据结构。这似乎比其他很多事情要来得轻松。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;优秀的想法总是有办法进行简化，而且能解决原有目的之外的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;成功的关键在于问题的选择，而不是找出解决的方法。只要你能找到正确的方向，只要你能提出正确的问题，
你就已经开始迈向成功，问题的解决就在眼前。&lt;/p&gt;
&lt;p&gt;要从实际应用中发现问题。人们很容易钻进理论的牛角尖，埋首于细枝末节，却失去了和真实世界间的联系。
我研究的往往是那些有一定实际意义的问题，我感觉自己能够为它们找到更加实用的算法。&lt;/p&gt;
&lt;p&gt;另一方面，世事毕竟无法预料。在这些与世隔绝的领域中产生的想法说不定什么时候就会与其他事物发生
联系。数学和理论计算机科学的魔力就在于此。你正想寻找某种普遍原理，突然就出现了某种神秘的联系。
没有人知道这是为什么。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;人与人之间交往是非常重要的，而且它具有合作精神。身为教授，最大的乐趣之一就在于能带领一批研究生。
它能让你在研究中拥有巨大的优势，而且能调动极大的积极性，因为你身边的人都有着创新、开放的思维，
而且求知若渴。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;成功需要什么？需要头脑，也需要坚忍不拔的精神。要解决一个问题，可能会有许多次失败的尝试，但最后
总有一次尝试让你看到奇迹的出现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;leslie-lamport&quot;&gt;
&lt;h2&gt;Leslie Lamport&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我记得有一次午休时我坐在那里，有人进来以大人的口吻说：“看他那个开心样，把计算机当玩具了。”他说
的没错，这就是个绝妙的玩具。而这些大人根本没认识到它的绝妙之处。&lt;/p&gt;
&lt;p&gt;我做研究从来都不是坐在那里干想：“X这个问题很重要，所以我应该解决X。”我想也没人会这样做。人们做
研究是因为觉得某事很好玩，才会有兴趣去做。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我努力教学生们如何作数学证明，但没有成功。如今我意识到，失败的原因在于当时我有一种错觉，总以为
应该有一套严密、精确的数学论证方法，但实际上数学证明只是一种书面形式，也并没有那么严密。现在我
已经转变了看法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;在对 SIFT 进行验证时我们发现了一个漏洞。这种漏洞只有形式化验证才能发现，其他任何方法都发现不了。
这种漏洞每两年就会导致一架飞机由于偶发的宇宙射线而坠毁。&lt;/p&gt;
&lt;p&gt;对那些性命攸关的计算机系统而言，验证绝对是必不可少的重要环节，但现状看来却并非如此。人们仅仅依赖
于测试。测试当然不能忽略，但它决不能替代形式化的数学验证。&lt;/p&gt;
&lt;p&gt;程序和算法都是抽象的数学实体。它们都可以应用数学方法。所以看在上帝的份上，让我们做吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;回顾自己的工作成果，大多数都是纯属好运。我只是在合适的时间遇到了合适的问题，而又恰好具有合适的
知识背景而已。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;stephen-cook&quot;&gt;
&lt;h2&gt;Stephen Cook&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;某些问题无法依靠算法解决，这是不可改变的基本事实。而正是这一想法吸引了我。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;这似乎是一个非常自然而又基本的问题。显然，有些问题在原则上可以通过算法解决，但实际中却不行，因为
等到太阳系毁灭也不会算完。所以考察问题的固有难度是一个很自然的事情。&lt;/p&gt;
&lt;p&gt;在计算机出现之前，人们只能靠手写来执行算法。这个过程极为漫长乏味，所以复杂性的问题很难引起人们的
兴趣。现在有了强大的计算机来帮助我们，每秒执行数千次操作，自然而然就会探究到底有哪些类型的问题
可以真正得到解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我们无法证明这些东西，这也是数学的这个领域里令人沮丧的地方。我们也无法证明 P 不等于 NP。因此可能
会有人发明某种聪明的并行算法，可以在多项式时间内解决某个 NP 完全问题。&lt;/p&gt;
&lt;p&gt;在这种情况下，很难去定义进展。我们还没有接近成功，不过也有了部分的成绩。人们正在从多个不同的领域
试图攻克这一难题。顺便说一句，P = NP 是可能的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;leonid-levin&quot;&gt;
&lt;h2&gt;Leonid Levin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;有时候，有些事情不能做也是件好事。有很多事情我都不希望别人对我做。&lt;/p&gt;
&lt;p&gt;这么多世纪以来，几乎所有著名的数学猜想都得到了解决，这一事实就是一个有力的证明，说明 NP 完全问题
可以在多项式时间内解决，而不需要指数时间。数学家们往往认为历史证据表明 NP 需要指数时间，我认为
他们完全搞反了方向。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;frederick-p-brooks&quot;&gt;
&lt;h2&gt;Frederick P. Brooks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;如果有人对你说：“你做的东西很不错，但它对我一点帮助都没有。”这其实是在提醒你要脚踏实地。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我认为，在项目经理在外专设一个系统架构师是很重要的。在架构的实施过程中，有一个首席设计师以个人
智慧掌控整体设计也是同等重要的。这是让设计获得竞争力的唯一途径。&lt;/p&gt;
&lt;p&gt;在《人月神话》中我曾说过要制造软件，然后适时扔掉。但我不会再做出这种言论。现在我会说，先构建一个
最小限度的版本，将其投放到市场，开始收集反馈，然后再逐步增加功能。先制定规范，然后再构建和测试的
瀑布式模型对于软件设计来说显然是错误的。与用户之间的交流对于规范的制定是极为关键的。我们必须在
构建和测试的过程中不断地完善规范。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;burton-j-smith&quot;&gt;
&lt;h2&gt;Burton J. Smith&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;几乎任何事物的速度都是可变的。任何计算机都能以某种速度模仿其他任何事物。&lt;/p&gt;
&lt;p&gt;在涉及如此多人的设计中，你无法通晓所有事情的状态。但你必须明确自己想要什么。最重要的一点可能是：
用自己的想象力来考虑事情，然后让大家来共同完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;william-daniel-hillis&quot;&gt;
&lt;h2&gt;William Daniel Hillis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;连结机器的产生是因为我意识到了一下矛盾：人脑的运行比最快的计算机还要快，但其实人脑的转换需要好
几微秒的时间，而计算机只需要几纳秒。&lt;/p&gt;
&lt;p&gt;所以很明显，大脑的组织原理是并行的，而且是大规模并行。信息就在许多非常简单的并行单元的连接中间
传递。如果我们按照这种组织系统来制造一台计算机，就很可能完成大脑所做的事情。连结机器的设计动机
就这么简单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;生物学家相信，简单的数学理论通常都是错误的，因为生物系统成因众多，彼此也没有清晰的界限，基本上
可以说是杂乱无章。生物系统确实也有美存在，但这是一种复杂、丰富之美，而不是物理学那种简约、优雅
之美。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;大脑并不是由运算放大器构成的。但如果能理解放大器电路中的反馈原理，对于理解某些生物系统的运作方式
会是很有帮助的。反馈已经成为生物学中内在化的东西，而且已经根植于我们对生物体运作的认识当中。我们
并不认为反馈出自控制论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;明斯基和费曼都教过我如何思考，而他们思考的方式大相径庭。但他们共有的一点是乐于质疑一切。在我们的
现实生活中有许多看似毫无疑问的假设，而他们两人都善于把这些假设挖掘出来。而且明斯基和费曼都以自己
的工作为乐。我想这一点很重要，而且我自己也是如此。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;edward-a-feigenbaum&quot;&gt;
&lt;h2&gt;Edward A. Feigenbaum&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;医学很棒的一点在于，它是一个极好的演练沙盘，启发式无处不在。医学就是这样。这里面几乎没有生搬
硬套，也从不像白纸黑字那样绝对。医学是一门艺术，需要经验和知识，也有规矩可循，能进行准确的猜测
和良好的判断。所有这些综合在一起，再加上推理过程，当然还有真实的数据，医生会测量病患的各种体征，
做各种化验，然后努力对检测结果进行判断。&lt;/p&gt;
&lt;p&gt;人工智能方法就是在满是不成形的问题的领域中进行选择的方法。一般领域内的许多可计算问题，不管是物理
计算还是工资计算，都是成形的问题，有对应的算法。解决这种问题我们不需要做任何究查。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;一门新技术不会自己走进现实生活。它只能依靠个人或组织对这种技术的拥护才能融入这个世界。技术不会
推销自己。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;我们必须认清，人类是一个智能主体，而计算机则是另一个智能主体，二者的能力可以互为补充。我们必须
设计出自己的系统，以便两者能够协同工作，从而获得更好的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;douglas-lenat&quot;&gt;
&lt;h2&gt;Douglas Lenat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;有多少人一生中能有2%到10%的机会对这个世界产生重大的影响？如果真有这样的机会，你应该抓住它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;19世纪的物理学和直到当今的工程学都对人类的“身体”机能提供了“增强”。我们能到达的地方比步行的
距离更远，速度也更快。我们彼此间能交流的距离也完全超过了大声喊叫的范围。&lt;/p&gt;
&lt;p&gt;人工智能的目标就是一种“智能增强”，这样我们就能更聪明，更具创造力，可以更快地解决更难的问题，
同时减少遗忘，增强记忆。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;学习只在已知事物的边缘发生，所以人们只可能学到与自己已知相似的新东西。如果你试图学习的东西与你
已知的东西距离不远，那么你就能学会。这个边缘的范围越大（你已知的东西越多），就越有可能发现新的
事物。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;直到现在，人类的生命都是线性有限的。我们在一个地方存在一段时间，生命的结束就是死亡。而这一切可能
会发生改变。想象一下每个人在网络空间中都有多个智能主体可以作为替身，可以去做我们喜欢的任何事情，
而真实的意识则停留在一个肉体中。只要通信带宽足够大，在任何时候我们都可以将自己的精神迁徙到这些
另外的主体中去。一个人死亡后，他或她的某些主体还会继续存在。福瑞德死了，但还有一些福瑞德在我们
身边。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id1&quot;&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;最后，引用书中后记的几段话（注意，本书写于1998年），以做结语。&lt;/p&gt;
&lt;p&gt;50年前，最优秀的工程师和物理学家所面临的难题仅仅是如何让硬件设备能够运转起来。&lt;/p&gt;
&lt;p&gt;40年前，本书中的部分科学家开始了他们的职业生涯，面临的挑战变成了如何让编程更加容易。
Backus 和 McCarthy 等研究者们设计的语言不仅适用于科学家，而且也适用于商业应用及人工智能。&lt;/p&gt;
&lt;p&gt;30年前，Brooks 和 Dijkstra 等操作系统设计者向人们展示了一台计算机可以同时执行多个任务，而程序员亦
无需了解这些任务之间的相互影响。Knuth 又通过编译器进一步简化了编程语言的设计。Feigenbaum 的专家系统
则证明了人工智能的使用价值。&lt;/p&gt;
&lt;p&gt;20年前，Knuth、 Rabin、 Tarjan、 Cook 和 Levin 向人们展示了怎样精确地分析算法。Kay 让程序员在设计
软件时考虑使用“对象”，在很大程度上消除了为每种新的应用去发明新的专用语言的需求。Lamport 则提供了一种
有关分布式系统的思考框架。&lt;/p&gt;
&lt;p&gt;10年前，人工智能引起了全球性的关注，Lenat 开始了 Cyc 项目。微处理器的广泛适用性促使 Burton Smith 和
Hillis 开始研究两种完全不同的大规模并行设计方法。如今 Brooks 等人利用并行计算机来解决各种问题，从
模拟分子到创建虚拟厨房。&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">对于 itertools.tee 的理解</title>
    <id>http://www.pywave.com/2012/12/09/talk-about-the-tee-function-in-itertools-module</id>
    <updated>2012-12-09T00:00:00Z</updated>
    <link href="http://www.pywave.com/2012/12/09/talk-about-the-tee-function-in-itertools-module" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;在 Python 编程中，生成器（Generator）和迭代器（Iterator）是两个非常有用 + 好用的语言特性。在函数
中使用 yield 关键字即定义了生成器对象，通过 yield 语句可以对外生成值序列，实际上就是返回了一个特殊
的迭代器。生成器每次迭代的值( 调用 next() )都是实时生成的，其会在生成的前后对生成器对象的状态进行
保存/恢复，从而可以间隔有序地运行代码，持续生成值。生成器的这种延迟计算特性（ &lt;a class=&quot;reference external&quot; href=&quot;http://en.wikipedia.org/wiki/Lazy_evaluation&quot;&gt;lazy evaluation&lt;/a&gt; ）
在很多情况下都非常有用，最典型的，可以让程序动态遍历那些需要可观资源（CPU 或 I/O）生成的对象，平摊
生成对象的时空开销。在日常的 Python 编程中，用生成器搭配程序中的一些 for 循环结构，往往可以减少程
序实现的逻辑复杂度。为什么？因为我们可以将控制循环的逻辑转移到生成器中 &lt;a class=&quot;footnote-reference&quot; href=&quot;#id4&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; ， 从而将不同的处理逻辑
分离开来，各个击破，当然会好处理不少。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;来看看 itertools.tee&lt;/h2&gt;
&lt;p&gt;为了更方便地在实际环境中使用生成器和迭代器，标准库里的 itertools 模块对一些常用的辅助操作进行了封
装，提供了许多有用的函数。 tee(iterable[, n] ) 就是其中一个很有趣的函数，在 &lt;a class=&quot;reference external&quot; href=&quot;http://docs.python.org/library/itertools.html#itertools.tee&quot;&gt;官方文档的描述里&lt;/a&gt; ，
其作用是为一个可迭代对象生成n个独立的迭代器。如果只是看文档中的文字介绍，还是有点难理解到底 tee 的
作用是什么。当然还是代码的解释最直接，下面我们会动手动眼来看看如何使用生成器来实现上面所说的功能。
首先我们先来看下，与 tee 函数效果相同的一个简单 Python 代码实现（为了能更方便进行讲解，我们将该
函数名改为 tee1），&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tee1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deques&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydeque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mydeque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# when the local deque is empty&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;newval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# fetch a new value and&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deques&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# load it to all the deques&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mydeque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deques&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码利用了闭包和生成器的特性，很直白简单地实现了 tee 函数的功能，相当漂亮的代码。函数可接收
两个参数，包括可迭代对象 iterable 以及默认值为2的生成数n。为了缓存数据，生成了n个 deque 实例来做
数据容器，赋值于 deques 变量，之所以使用 deque 是因为其高效的序列两端操作。然后，在内部定义 gen
生成器，参数 mydeque 即该 gen 生成器所维护的数据容器，利用外部的 deques 和自身维护的 mydeque 实现
简单的控制逻辑，包括何时取 iterable 的新值，如何缓存数据，以及如何对外生成值。通过返回n个 gen 生
成器对象，我们就为可迭代对象 iterable 生成了n个独立的迭代器了。&lt;/p&gt;
&lt;p&gt;对代码演绎一番，我们现在可以很清晰地知道 tee 函数的作用，也应该搞清楚了什么情景下我们会需要用
到 tee 函数。假设我们构建了一个生成器，通过内部实现的大量复杂逻辑来生成对象，生成器的延迟计算特性
让我们可以在有需要时才生成，但是，当我们需要在几个地方单独使用生成的对象（同步或异步），怎样做才
行呢？简单的解决方法是，通过使用几个生成器来进行处理。但如此一来，就重复了大量的运算，这当然不会
是我们所希望的。那能不能做到一次运算，到处使用呢？ tee 函数的作用便在这里，我们对 tee 函数生成的
几个生成器进行相关操作，但实际上只做一次的生成期运算。&lt;/p&gt;
&lt;p&gt;但 tee1 的实现显然还有改进的余地，最明显的，tee1 中为每个 gen 生成器都缓存了一份数据，这毫无疑问
会造成数据冗余和操作冗余。好吧，让我们对 tee1 进行一些修改。下面的 tee2 便是改造的成果:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tee2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# hold the indexes for the gen objects&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxindex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# when the index is the max index&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# fetch a new value and&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# load it to the items&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，每个 gen 生成器都共享一份数据缓存（items），并都维护着一份自身位置的指针（index）。每个 gen 在
生成值时会对 index 进行检测，若该 index 处于末尾位置，则对 iterable 取新值并缓存到外部的 items 数
据容器中，然后像其他情况那样返回数据容器中 index 位置的对象。恩，看来 tee2 已经解决了 tee1 中数据冗
余和操作冗余的问题了，应该开始喝杯咖啡休息会啦。噢，等等，再仔细看看 tee2 的代码 ... ，Oh No，虽然解
决了一个问题，但是似乎又带来了一个也相当明显的“隐患”...&lt;/p&gt;
&lt;p&gt;聪明的你肯定发现了，上面的代码实现只有取 value 和缓存 value 的操作，并没有将 value 从数据容器中释放
的操作！这可能导致的后果是，如果 iterable 对象会且需要持续生成值（有可能是无限生成），我们机器中的
小小内存便会逐渐被填满，这可不是什么好事情，对吧。没办法，我们需要对代码继续进行改进，这不，就出现
了下面的 tee3。 :-)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tee3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# hold the indexes for those gen object&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minindex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;iter_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了避免数据容器的数据“只进不出”，我们必须判断特定情况，从数据容器中 POP 出值。首先需要想的是，
数据容器里的值在什么时候能被抛弃。毫无疑问，只有当该值为一个“无用值”时，也就是这个值在往后都不可
能会被使用的时候，我们就可以将该值从数据容器中 POP 掉。&lt;/p&gt;
&lt;p&gt;搞清楚了相关逻辑，很快就能找到解决方法。当一个 gen 对象对外生成值时，如果其维护的 index 为索引
集合（ iter_index ）中的最小索引，且在当前唯一拥有这个索引，那么处于 index 的值在生成后将成为一
个“无用值”。对应 tee3 中的代码是:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
elif iter_index[gid] == minindex:
    value = items[0]
    if iter_index.count(minindex) == 1:
        items.popleft()
&lt;/pre&gt;
&lt;p&gt;由此，我们便解决了 tee2 代码中存在的隐患。但是，从 tee1 开始逐步改进，到现在 tee3，其实也还是有
很多不完美的地方（例如代码中还没有任何异常检测）。除此之外，现在的 tee3 对比 tee1 是繁复了许多，
也晦涩难懂了许多。典型的，为了在一般情况下正确取值，必须计算当前索引与最小索引间的差值，来获得 gen
对象在数据容器中对应的值，于是代码牺牲了可读性:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
value = items[iter_index[gid] - minindex]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;还有一点可以在 tee3 的代码中看出来， tee 函数为我们节省了重复计算的开销，但是缓存大量对象的隐患还是
存在。想像一下，在 tee 返回的多个 gen 生成器对象里，只要有一个生成器一直不生成值，那么很不幸，tee
函数中的数据容器还是会缓存 iterable 对象迭代出来的所以值，因为没有时机能让数据容器去释放值。任何技
术都是有权衡的，应该怎样使用 tee 函数，需要根据具体的情景来思考。&lt;/p&gt;
&lt;p&gt;最后，还想再说一句，不要忽视 Python 强大的动态特性，我们可以作出许多有趣实效的设计，而无需拘泥于一些
特定思想或模式。&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;table class=&quot;docutils footnote&quot; frame=&quot;void&quot; id=&quot;id4&quot; rules=&quot;none&quot;&gt;
&lt;colgroup&gt;&lt;col class=&quot;label&quot; /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td class=&quot;label&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;有时候，循环控制会很复杂，容易作出糟糕的设计，最典型的就是那无止境的 while True 循环 ;-)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">科技是什么</title>
    <id>http://www.pywave.com/2012/11/13/what-is-technology</id>
    <updated>2012-11-13T00:00:00Z</updated>
    <link href="http://www.pywave.com/2012/11/13/what-is-technology" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;科技是什么？在我的眼中，科技是一个高尚的名词，意味着进步，抗生素的发明让人类的寿命增长，电磁原理
的发现让人类跨入电气时代，计算机的发明让人类获得了巨量计算的能力。我的身体和心灵都已经习惯了现代
科技带来的生活，依然会为科技进步而感到欢喜，相信科技能带来更多不同的东西以及体验；作为一名程序员，
一直认为自己正亲身参与自上世纪末开始的信息化浪潮，并看到了信息科技的进步正不断加快全球信息的流动
（以及产生）。但是，工业革命带来的环境污染，现代热武器战争的疯狂（一战与二战），因为能源矿产需求
正变得千疮百孔的土地，无一不是让人触目惊心的事实，科技发展带来的“恶”同样巨大。&lt;/p&gt;
&lt;p&gt;最近看了 KK (Kevin Kelly) 的《 &lt;a class=&quot;reference external&quot; href=&quot;http://book.douban.com/subject/6965746/&quot;&gt;科技想要什么&lt;/a&gt; 》(What Technology Wants) ，感觉非常有趣，在阅读
的过程中获得了许多有益的思考。书中 KK 以宇宙（生命）的眼光来看待科技，对科技进行了各种高屋建瓴的
思考，科技不是我们眼中“冷冰冰”的存在，科技伴随着生命起源而生，科技是生物界的第七种生命形态，科技
拥抱生命并提供多样性，科技将成为人类生命的延伸。&lt;/p&gt;
&lt;p&gt;自己印象很深刻，在 The Pragmatic Programmer 中提到过软件的熵，即所谓的破窗户理论，事情最终的失败
源于对细小问题的不关注。熵是热力学定律中的概念，在很多场景（包括书中）被用来表示一个系统的不确定
性、混乱以及无序。因为熵的存在，有序的事物会逐渐失衡，转入无序状态。对于那些存在差异性的有序状态，
要保持其独特的差异及有序性，必须耗费相应的能量（或质量）。那些持久差异的广泛传播可以称为熵的反向
运动。这种现象在书中被 KK 称之为“外熵”。保持差异的努力（外熵）与混沌无序的拉动力（熵）之间的斗争
创造出了许多自然界的奇观，包括生命、思维以及科技。&lt;/p&gt;
&lt;p&gt;话说在时间的起点，宇宙开始于一道灼热的闪光（我们都知道的大爆炸）。然后宇宙便一直保持对外扩张的趋
势，这种趋势产生了一种相对势能，使得空间中的能量和物质得以流动。数十亿年的缓慢运动，产生了稳定的
分子团，然后是恒星以及星系的诞生，最终孕育出了生命。生命便是与自然界中的熵持久抗争最终达至平衡状
态的产物。&lt;/p&gt;
&lt;p&gt;接着又是一场旷日持久的抗争，40亿年的持续进化，生命从单细胞生物发展到现在丰富多彩的物种。最为难能
可贵的是，人类拥有了思维这无比强大的工具，于是，人类开始进行畜牧耕种，并掌握了如何使用火。随着语言
的诞生，文明正式在人类世界中出现。接着，文字、纸张、印刷术、火药、指南针等重要科技在人类的历史长河
里逐一被发明，知识经验在逐渐积累。最终，文明的曙光冲破阻碍，照耀到了工业革命时代以及现在的信息革命
时代，随之而来，人口急速增长，信息爆炸。现代人类文明的数千年发展史，不过是宇宙历史中的沧海一粟，但
是伴随生命与科技不断增加的多样性，技术元素的发展使得信息获得越来越快的积累速度。在宇宙毫不起眼的
角落处，一颗蓝色行星正发出微弱但顽强的光芒。&lt;/p&gt;
&lt;p&gt;科技带给我们什么？更多选择，更多机会，更多联系，更多思想，更多的美，以及随之而来的更多问题。为什么
乡村的人都涌入城市，因为城市能为他们（更重要的，他们的下一代）带来更多的选择和可能性。现在的中国，
许多人已然沐浴在现代科技带来的灿烂阳光中，虽然环境问题依然很严重，许多神奇的事情也依然在这神奇的国
度里不断涌现，但我们能确切地感觉到科技发展带来的舒适感，没有人愿意回到80年代前的中国，我们对科技已
然有了非常大的依赖感。科技的持续进步，理论上将会对现在的问题进行相应的解决。总体而言，科技发展带来
的建设多于其带来的破坏，人类文明数千年来的发展为我们提供了佐证。&lt;/p&gt;
&lt;p&gt;非常认同 KK 的观点，科技不是处于生命的对立面，两者是相辅相成。生命想要什么，技术就想要什么。&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">简洁编程</title>
    <id>http://www.pywave.com/2012/09/19/concise-programming</id>
    <updated>2012-09-19T00:00:00Z</updated>
    <link href="http://www.pywave.com/2012/09/19/concise-programming" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;干净优雅，就是 Python 在我心中的主要印象。&lt;/p&gt;
&lt;p&gt;当然 Python 绝不是什么完美的编程语言，但其独特的编程风格确实很招人喜爱。得益于强制缩进和优秀的
编码规范（类 &lt;a class=&quot;reference external&quot; href=&quot;http://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP8&lt;/a&gt; 和 &lt;a class=&quot;reference external&quot; href=&quot;http://www.python.org/dev/peps/pep-0020/&quot;&gt;The Zen of Python&lt;/a&gt; ），使用 Python 编写的代码一般都能具有颇高的
可读性。结合 Python 强大的动态特性（如 duck-typing, closure, lazy evaluation 等），我们可以
大幅度降低解决问题所需的代码量。代码量越少意味着可能存在的 Bug 也就越少，也意味着工作量的降低，
从而提高我们的生产力，让程序质量更容易得到保障和维护。&lt;/p&gt;
&lt;p&gt;每门程序设计语言都有其最佳实践的领域，对于 Python 来说，其适合于那些对执行效率不敏感，逻辑处理
相对复杂的场景，典型的就是构建Web应用啦（君不见 &lt;a class=&quot;reference external&quot; href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; , &lt;a class=&quot;reference external&quot; href=&quot;http://www.tornadoweb.org/&quot;&gt;Tornado&lt;/a&gt; , &lt;a class=&quot;reference external&quot; href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; , etc）。啊，
对了，Python 用于快速原型构建也是出了名的好用。事实上， Python 因为其对C颇强的亲和力，在一些
需要复杂逻辑处理和高性能的领域也有很多的建树，例如科学计算领域（强大的 &lt;a class=&quot;reference external&quot; href=&quot;http://www.scipy.org/&quot;&gt;SciPy&lt;/a&gt; 和 &lt;a class=&quot;reference external&quot; href=&quot;http://numpy.scipy.org/&quot;&gt;NumPy&lt;/a&gt; ）和
图像处理领域（很有用的 &lt;a class=&quot;reference external&quot; href=&quot;http://www.pythonware.com/products/pil/&quot;&gt;PIL&lt;/a&gt; ）。&lt;/p&gt;
&lt;p&gt;只要实际使用过 Python 去解决问题，很快会喜欢上这门语言。在学习 Python 之初，我写过好一些小脚本
来自娱自乐，用来管理资源，以及获取资源（有爱的漫画和性感美女图是不能少的，lol）。而现在，自己也
在工作中使用 Python 来处理实际问题。在使用 Python 编程的实践中，逐渐感悟到了一个 Python 程序
设计最佳实践，扁平化设计。当然，这所谓的最佳实践仅是个人的愚见，归纳出来有益身心健康哈。 :-)&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;扁平化设计&lt;/h2&gt;
&lt;p&gt;通过良好的设计，使用 Python 编写的代码一般都能具有较好的模块性，即对复杂度的正常封装，以及定义
清晰的调用接口。宏观来看，有了定义良好的模块，我们需要解决的问题还有很多，模块间协作和模块间通信
都必须考虑。对于这类问题，存在许多不同的设计和解决方案。在过往不多的程序设计经验里，包括察看他人
的设计（各种不同开源框架代码），以及自己的点滴实践体会，随着思考深入，也开始有了自己见解。现在能
察觉到，扁平化设计为这类问题提供了一个相对简单清晰的解决模式。&lt;/p&gt;
&lt;p&gt;假设现在有若干个功能模块，包括模块A、模块B和模块C，模块间会有程度不同的交互通信。要如何进行处理？
最简单的想法是，让各模块保持独立，当模块A需要和模块C通信时，直接进行特定的交互就行了。乍看起来，
这样的实现确实很简单，但弊端是，我们要为各模块单独定义特定的通信接口（函数或方法），如果需要交互
的模块数量很多，模块间的交互实现必然趋向复杂，我们还必须要对众多分散于各模块的通信处理实现进行管
理。为了从这些复杂度中解放出来，我们需要对这一想法做一些升级。&lt;/p&gt;
&lt;p&gt;思考一会便能想到，应该可以设置一个中心模块来对模块间的交互进行统一管理。假设现在有一个主干模块P，
当模块A需要和模块C通信时，首先通过主干模块P获得与模块C交互的接口，然后就能通过该接口与模块C进行
通信。多了一个间接操作，实现似乎变得更为烦琐。事实上，主干模块P的存在确实增加了模块间通信的约束
性，但这并没有阻碍模块间的有效通信，我们可以在主干模块中对程序的整体运行进行统一的管理和设置，
获得的好处是，降低了可能出现的模块间通信复杂度，增加了模块局部变化及功能扩展时的应对能力，从而
保持了程序整体设计的整洁清晰。扁平化设计的中心思想就在于此，遵守着浅分层的原则，使模块间交互的
处理和抽象尽可能的减少。程序可能会不断膨胀，扁平化设计的简洁性则避免了复杂度的失控增长，简洁而
漂亮。&lt;/p&gt;
&lt;p&gt;扁平化设计还有一个优点，那就是可以很容易的实现可见原型，然后基于原型持续进行进行快速迭代，完善
具体的实现以及进行功能扩展，而测试也可以与构建同步进行。说起来，这些也都是使用 Python 编程的优势
哈。&lt;/p&gt;
&lt;p&gt;我认为 Python 这类动态语言很适合扁平化设计，没有“烦人”的类型定义，配合只关心行为的 Duck Typing
特性，让程序可以保持简洁和灵活性。扁平化设计的难点之一是，主干模块不应该与功能模块有过多耦合，
而各功能模块则需要“知道”关于主干模块和程序运行的相关信息， Python 出色的动态特性为之提供了足够
的支持，免去很多细节的处理。同时， Python 代码可读性高的优点可以让我们较快的了解程序的实现。只要
理解了整体的设计思想，遵循扁平化设计的程序会具有相当高的清晰性，也就是说，扁平化设计可以让程序员
更容易地掌握程序整体的运作，从而更好地去理解具体的内部逻辑。&lt;/p&gt;
&lt;p&gt;当然，扁平化设计不是也不可能是万事适用的设计准则，其也具有许多的局限性。限于自己资质和经历有限，
还需要更多的实践才能对扁平化设计有更多的认识。但是我依旧认为（起码现在），扁平化设计是简洁编程
的一种体现，而且很适合用于 Python 程序设计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;从程序设计的角度来看，简洁清晰的代码通常更为优雅，这意味着可以更好的应对变化，可以无拘束地作出许
多有趣实效的设计，而不需要拘泥于一些特定思想或模式（上面论述的扁平化设计便是一例）。 Python 朴实
干净的语法，出色的动态特性，开放的社区文化，不完美但强大的标准库，以及众多优秀的第三方库，让我们
在解决问题时，不需要在语言和底层实现上纠缠太多，专注于问题的本身，从而可以迅速开始创造生产力。在
使用 Python 进行程序设计时，简洁编程之道可以说时刻都在影响着我们的思维。&lt;/p&gt;
&lt;p&gt;少即是多， Python 的“无拘束”没有强行附加什么精神负担或者枷锁，为了乐趣，为了实效。&lt;/p&gt;
&lt;p&gt;辽阔的星空就在眼前，只待那好奇的心去进行探索。&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.pywave.com/feed.atom">
    <title type="text">浅谈 Gevent 与 Tornado</title>
    <id>http://www.pywave.com/2012/08/17/about-gevent-and-tornado</id>
    <updated>2012-08-17T00:00:00Z</updated>
    <link href="http://www.pywave.com/2012/08/17/about-gevent-and-tornado" />
    <author>
      <name>Jason Lai</name>
    </author>
    <content type="html">&lt;p&gt;还是前几月的时候，几乎在同一时间，自己接触到了 Gevent 和 Tornado 这两个已经不新的东西，那时那个
思绪混乱啊！似乎都支持异步，似乎都是无阻塞（non-blocking），性能似乎都好到个不行
（&lt;a class=&quot;reference external&quot; href=&quot;http://nichol.as/benchmark-of-python-web-servers&quot;&gt;猛击&lt;/a&gt;）。知道两者虽是单线程，
但基于无阻塞的特性，战斗力那个是嗖嗖地上涨，运用得当的话，hold住上K个连接不是问题。虽然很感
兴趣，虽然完全没弄清楚两者内里的实质，但为了完成工作，略略了解了基本的应用后，卷起手袖就上啦。
当然，作为一个有志的程序员，在满足了现实的迫切需要后，一颗渴望知其所以然的心便开始蠢蠢欲动。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;tornado&quot;&gt;
&lt;h2&gt;从 Tornado 说起&lt;/h2&gt;
&lt;p&gt;刚开始，对 Tornado 的感觉最为新鲜，在官网介绍里其是一个无阻塞的Web服务器以及相关工具的集合，但
个人更为倾向其为一个颇为完备的微型 web 框架。Tornado 性能好的关键是其无阻塞异步的特性，但这魔术
似的效果是如何达成的呢？迷思与困惑。我那小脑袋里的思维还停留于多进程（多线程）那样的并发模型中，
实在有点难以理解 Tornado 的异步机制。&lt;/p&gt;
&lt;p&gt;通过查阅各式文章以及源代码，整体的框架脉络开始逐渐在脑海中显现出来。其实，Tornado 的异步模型
是由事件驱动以及特定的回调函数（callback）所组成的！一直没有弄明白，Tornado 具体是如何实现
无阻塞异步，当清楚了事件驱动和回调函数的概念后，事情似乎又变得简单起来了。&lt;/p&gt;
&lt;p&gt;对于一般的程序，在执行阶段若遇到 I/O 事件，整个进程将被阻塞住，直到 I/O 事件结束，程序又继续执行。
接设我们对一些 I/O 事件进行了定制，使其可以立即返回（即无阻塞），那么程序将能立即继续执行。但
问题又来了，那当 I/O 事件完成后又该怎么办呢？此时，回调函数的威力就出来了，我只需要将进行特定
处理的回调函数与该 I/O 事件绑定起来，当该 I/O 事件完成后就调用绑定的回调函数，就可以处理具体的
I/O 事件啦。啊，似乎还有一个问题，回调函数要如何与 I/O 事件绑定起来？最简单的想法是，直接通过
一个 while True 循环不断的轮询，当检测到 I/O 事件完成了即触发回调函数。但是，这样的效率当然不会
高，利用系统中高效的 I/O 事件轮询机制（epoll on Linux, kqueue on most BSD）就是最明智的
解决方案。于是，无阻塞 I/O +事件驱动+高效轮询方式便组成了 Tornado 的异步模型。&lt;/p&gt;
&lt;p&gt;Tornado 的核心是 ioloop 和 iostream 这两个模块，前者提供了一个高效的 I/O 事件循环，后者则封装了
一个无阻塞的 socket 。通过向 ioloop 中添加网络 I/O 事件，利用无阻塞的 socket ，再搭配相应的回调
函数，便可达到梦寐以求的高效异步执行啦。多说无益，来看一下具体的示例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tornado&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioloop&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tornado.httpclient&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncHTTPClient&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.google.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.yandex.ru&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.python.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bytes: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                 &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                 &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;http_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncHTTPClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Starting &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ioloop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOLoop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为使用了 AsyncHTTPClient 来处理请求操作，整个示例是异步执行的，即三个url请求无等待的依次发出。
我们可以看到 fetch 方法使用了 print_head 函数来作为回调函数，这意味着，当 fetch 完成了请求操作，
相应的 print_head 函数便会被触发调用。恩，... 额，...，乍看起来，使用 Tornado 进行异步编程似乎
并不难，让人跃跃欲试。但实际上，在现实生活中，事件驱动的编程还是会很费脑力，需要一定的创造性思维。
不过，这也许是 Tornado 受欢迎的原因之一呢。 :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;gevent&quot;&gt;
&lt;h2&gt;再来看下 Gevent&lt;/h2&gt;
&lt;p&gt;Gevent 是基于协程（coroutine）实现的 Python 网络库，使用了轻量级的 greenlet 作为执行单元，并
基于 libevent 事件循环构建了直观的调用接口。&lt;/p&gt;
&lt;p&gt;当时看到这样的描述，脑袋的第一反应是，协程？？稍稍了解后，发现协程其实也不是什么高深的概念，协程
也被称为微线程，一看这别名就知道跟线程应该很类似。作为类比倒也可以这么认为，两者关键的区别在于，
线程是由系统进行调度的，而协程是由用户自己进行调度的。当知道这一事实后，立刻想到，这自行调度灵活
肯定是会很灵活，但要调度的话可是很有难度的吧？调度的方法暂时不谈，除了更为灵活外，自行调度的直接
结果当然就是省去了系统调度（什么用户态转内核态，以及什么 context switch），因此协程间切换的资源
消耗很小，再配合协程生成成本很低的另一特点，这可真是相当的美妙。事实上，Python 语言本身就支持基础
的协程的概念，generator 是其中的产物（&lt;a class=&quot;reference external&quot; href=&quot;http://www.python.org/dev/peps/pep-0342/&quot;&gt;这里&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;对于 Gevent，其使用的协程实际上就是 &lt;a class=&quot;reference external&quot; href=&quot;http://greenlet.readthedocs.org/en/latest/index.html&quot;&gt;greenlet&lt;/a&gt; 。当你使用 greenlet 生成了一些协程，就可以在这些
协程里不断跳转执行，两个 greenlet 之间的跳转被称为切换（switch）。通过切换，我们就可以实现对协程
的调度。还应该知道的是，每个 greenlet 都拥有一个父 greenlet ，这是在 greenlet 初始化时就确定的。
当一个 greenlet 执行完毕后，执行权会切换到其父 greenlet 中。实际上，所有的 greenlet 会被组织成
一颗树，树根便是最“老资格”的 greenlet ，这个老 greenlet 确定了各 greenlet 间的逻辑关系。&lt;/p&gt;
&lt;p&gt;上面说到协程必须自行调度，不会是要自己构造一个调度器吧？这当然可以做到，但不是必须，因为 Gevent
已经基于 greenlet 和 libevent 封装了许多基础常用的库，例如 socket 、event 和 queue 等，只要使用
这些库进行开发，或者对使用的标准库或第三方库打一下补丁（monket patch），就能保证生成的各协程在
I/O 等待时正确地进行切换，从而实现无阻塞的异步执行。&lt;/p&gt;
&lt;p&gt;刚接触 Gevent 时，感觉跟传统的并发编程很类似，但了解渐深后，才发现这货实际上跟 Tornado 更为类似。
因为， Gevent 本质上也是事件驱动。实现的策略可以是，在将要执行 I/O 阻塞事件时，先在事件循环中对该事件
进行注册，关联的回调函数便是对当前协程的切换操作（&lt;strong&gt;current_greenlet.switch()&lt;/strong&gt;），注册成功后即
切换回当前协程的父协程中进行执行（&lt;strong&gt;current_greenlet.parent.switch()&lt;/strong&gt;）。当注册的 I/O 事件被
触发后，事件循环在恰当时机便会执行该回调函数，也就是切换到原先的协程继续执行程序。从而，就实现
无阻塞的 I/O 事件处理。怎样，是否感觉相当的有趣？ :)&lt;/p&gt;
&lt;p&gt;Gevent 了不得的地方还在于，我们能像编写一般程序那样来编写异步程序，这可是弥足珍贵。为了更直观的
显示，让我们来看一下具体的运行示例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gevent&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gevent&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monkey&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# patches stdlib (including socket and ssl modules) to cooperate with other greenlets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;monkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.google.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.yandex.ru&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://www.python.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Starting &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bytes: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gevent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gevent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面示例做的事情实际上跟前面 Tornado 的示例是一样，同样是异步的对url进行请求。在我看来，使用
Gevent 进行编程，无论是可读性还是可操作性都能让人满意。但也要清楚，在实际操作中，为了达到较理想
效果，经常还是需要根据不同的情况对代码进行一些相应的“雕琢”。还有一点很常被人忽略， Gevent 是
基于协程实现的 Python 网络库，其适用面更多的是在于网络 I/O 频繁的需求里，很多情况下 Gevent 可能
并不是很好的选择。总的来说，Gevent 确实很讨人喜爱，性能好，开销小，代码易维护，是广大 pythoner
手中的一大利器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id3&quot;&gt;
&lt;h2&gt;总要总结一下&lt;/h2&gt;
&lt;p&gt;作为一名 Python 程序员，在探究和使用 Tornado 与 Gevent 的过程里，除了得到许多思考的乐趣外，最
让人高兴的是收获了一些全新的视野。使用 Python 编程的好处之一便是，可以很容易地跳出语言的框框去看
各式问题，从而提高自己对于程序设计的总体认识。人生苦短，我用Python！  :-)&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

